<searchdir:cavs>
<searchdir:include>
<searchdir:include/common>
<searchdir:include/components>
<searchdir:include/dais>
<searchdir:include/pipelines/cavs>

<vendor-token.conf>
<tokens.conf>
<virtual.conf>
<passthrough-playback.conf>
<passthrough-capture.conf>
<data.conf>
<pcm.conf>
<pcm_caps.conf>
<fe_dai.conf>
<alh.conf>
<hw_config.conf>
<manifest.conf>
<route.conf>
<cavs/common_definitions.conf>
<copier.conf>
<pipeline.conf>
<dai.conf>
<host.conf>


#
# List of all DAIs
#
#ALH Index: 0, Direction: duplex
Object.Dai {
	ALH."2" {
		id 		0
		direction	"playback"
		name		SDW0-Playback
		default_hw_conf_id	0
		rate			48000
		channels		2

		Object.Base.hw_config."ALH2" {
			id	0
		}

		# include DAI copier components
		Object.Widget.copier."0" {
			index 2
			dai_index 2
			type "dai_in"
			dai_type "ALH"
			copier_type "ALH"
			direction "playback"
			stream_name "SDW0-Playback"
			period_sink_count 0
			period_source_count 2
			format s16le
			node_type $ALH_LINK_OUTPUT_CLASS
			num_audio_formats 2
			# 16-bit 48KHz 2ch
			Object.Base.audio_format.1 {
				# 16 -> 32 bits conversion will be done in the copier,
				# therefore the out_bit_depth is 32
				out_bit_depth		32
				# dma_buffer_size should be 2 * obs for playback
				dma_buffer_size "$[$obs * 2]"
			}
			# 32-bit 48KHz 2ch
			Object.Base.audio_format.2 {
				in_bit_depth		32
				in_valid_bit_depth	32
				out_bit_depth		32
				out_valid_bit_depth	32
				dma_buffer_size "$[$obs * 2]"
			}
		}
	}
	ALH."3" {
		id 		1
		direction	"capture"
		name		SDW0-Capture
		default_hw_conf_id	1
		rate			48000
		channels		2

		Object.Base.hw_config."ALH3" {
			id	1
		}

		Object.Widget.copier."0" {
			index 3
			dai_index 3
			type	"dai_out"
			dai_type "ALH"
			copier_type "ALH"
			direction "capture"
			stream_name "SDW0-Capture"
			period_sink_count 2
			period_source_count 0
			format s16le
			node_type $ALH_LINK_INPUT_CLASS
			num_audio_formats 2
			# 16-bit 48KHz 2ch
			Object.Base.audio_format.1 {
				# 32 -> 16 bits conversion will be done in pipeline,
				# so both in_bit_depth and out_bit_depth are still 32 here.
				in_bit_depth		32
				out_bit_depth		32
				# dma_buffer_size should be 2 * ibs for capture
				dma_buffer_size "$[$ibs * 2]"
			}
			# 32-bit 48KHz 2ch
			Object.Base.audio_format.2 {
				in_bit_depth		32
				in_valid_bit_depth	32
				out_bit_depth		32
				out_valid_bit_depth	32
				dma_buffer_size "$[$ibs * 2]"
			}
		}
	}
}

#
# Pipeline definitions
#

# Pipeline ID:1 PCM ID: 0
Object.Pipeline {
	passthrough-playback."2" {
		format "s16le"
		index 2

		Object.Widget.pipeline.1.stream_name	"copier.ALH.2.0"

		Object.Widget.copier.1.stream_name	"Passthrough Playback 0"
	}

	passthrough-capture."3" {
		format	"s16le"
		index 3
		Object.Widget.pipeline.1.stream_name	"copier.ALH.3.0"

		Object.Widget.copier.1.stream_name	"Passthrough Capture 0"
		Object.Widget.copier.1.Object.Base.audio_format.1 {
			# 32 -> 16 bits conversion is done here,
			# so in_bit_depth is 32 (and out_bit_depth is 16).
			in_bit_depth	32
		}
	}
}

Object.PCM {
	pcm."0" {
		name	"Jack out"
		id 0
		direction	"playback"
		Object.Base.fe_dai."Jack out" {}

		Object.PCM.pcm_caps."playback" {
			name "Passthrough Playback 0"
			formats 'S16_LE'
		}
	}
	pcm."1" {
		name	"Jack in"
		id 1
		direction	"capture"
		Object.Base.fe_dai."Jack in" {}

		Object.PCM.pcm_caps."capture" {
			name "Passthrough Capture 0"
			formats 'S16_LE'
		}
	}
}

Object.Base {
	route."0" {
		source	"copier.host.2.1"
		sink	"copier.ALH.2.0"
	}

	route."1" {
		source	"copier.ALH.3.0"
		sink	"copier.host.3.1"
	}
}
