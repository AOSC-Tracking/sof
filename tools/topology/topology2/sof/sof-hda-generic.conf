# include paths
<searchdir:include>
<searchdir:include/common>
<searchdir:include/components>
<searchdir:include/controls>
<searchdir:include/dais>
<searchdir:include/pipelines>

# Include class definitions
<vendor-token.conf>
<tokens.conf>
<volume-playback.conf>
<volume-demux-playback.conf>
<volume-capture.conf>
<passthrough-capture.conf>
<eq-iir-volume-capture.conf>
<dai.conf>
<virtual.conf>
<data.conf>
<pcm.conf>
<pcm_caps.conf>
<fe_dai.conf>
<hda.conf>
<hw_config.conf>
<manifest.conf>
<route.conf>
<variables.conf>

# Define variables. These can be overridden from command-line while building the conf file.
Define {
	DYNAMIC_PIPELINE	0
	DMIC_CH_COUNT		0
	EQIIR_BYTES		"highpass_40hz_0db_48khz"
}

# include DMIC config if needed
IncludeByKey.DMIC_CH_COUNT {
	"[1-4]"	"include/platform/intel/dmic-generic.conf"
}

# DAI definitions
Object.Dai {
	HDA.0 {
		name 'Analog Playback and Capture'
		id 4
		default_hw_conf_id 4
		Object.Base.hw_config.HDA0 [
		]
		Object.Widget.dai.0 {
			direction playback
			index 1
			type dai_in
			stream_name 'Analog Playback and Capture'
			period_sink_count 0
			period_source_count 2
			format s32le
		}
		Object.Widget.dai.1 {
			direction capture
			index 2
			type dai_out
			stream_name 'Analog Playback and Capture'
			dai_index 1
			period_sink_count 2
			period_source_count 0
			format s32le
		}
		direction duplex
	}
	HDA.1 {
		name 'Digital Playback and Capture'
		id 5
		default_hw_conf_id 5
		Object.Base.hw_config.HDA1 [
		]
		Object.Widget.dai.0 {
			direction playback
			index 3
			type dai_in
			stream_name 'Digital Playback and Capture'
			dai_index 2
			period_sink_count 0
			period_source_count 2
			format s32le
		}
		Object.Widget.dai.1 {
			direction capture
			index 4
			type dai_out
			stream_name 'Digital Playback and Capture'
			dai_index 3
			period_sink_count 2
			period_source_count 0
			format s32le
		}
		direction duplex
	}
	HDA.4 {
		name iDisp1
		id 1
		default_hw_conf_id 1
		Object.Base.hw_config.HDA4 [
		]
		Object.Widget.dai.0 {
			index 7
			type dai_in
			stream_name iDisp1
			period_sink_count 0
			period_source_count 2
			format s32le
		}
		direction playback
	}
	HDA.5 {
		name iDisp2
		id 2
		default_hw_conf_id 2
		Object.Base.hw_config.HDA5 [
		]
		Object.Widget.dai.0 {
			index 8
			type dai_in
			stream_name iDisp2
			period_sink_count 0
			period_source_count 2
			format s32le
		}
		direction playback
	}
	HDA.6 {
		name iDisp3
		id 3
		default_hw_conf_id 3
		Object.Base.hw_config.HDA6 [
		]
		Object.Widget.dai.0 {
			index 9
			type dai_in
			stream_name iDisp3
			period_sink_count 0
			period_source_count 2
			format s32le
		}
		direction playback
	}
}

# Pipeline Definitions
Object.Pipeline {
	volume-playback.1 {
		dynamic_pipeline $DYNAMIC_PIPELINE
		index 1
		Object.Widget.pipeline.1 {
			stream_name 'dai.HDA.0.playback'
		}
		Object.Widget.host.playback {
			stream_name 'Passthrough Playback 0'
		}
		Object.Widget.pga.1 {
			Object.Control.mixer.1 {
				name '1 Master Playback Volume'
			}
		}
		format s24le
	}
	volume-playback.3 {
		dynamic_pipeline $DYNAMIC_PIPELINE
		index 3
		Object.Widget.pipeline.1 {
			stream_name 'dai.HDA.2.playback'
		}
		Object.Widget.host.playback {
			stream_name 'Passthrough Playback 1'
		}
		Object.Widget.pga.1 {
			Object.Control.mixer.1 {
				name '3 Master Playback Volume'
			}
		}
		format s24le
	}
	volume-playback.7 {
		dynamic_pipeline $DYNAMIC_PIPELINE
		index 7
		Object.Widget.pipeline.1 {
			stream_name 'dai.HDA.4.playback'
		}
		Object.Widget.host.playback {
			stream_name 'Passthrough Playback 3'
		}
		Object.Widget.pga.1 {
			Object.Control.mixer.1 {
				name '7 Master Playback Volume'
			}
		}
		format s24le
	}
	volume-playback.8 {
		dynamic_pipeline $DYNAMIC_PIPELINE
		index 8
		Object.Widget.pipeline.1 {
			stream_name 'dai.HDA.5.playback'
		}
		Object.Widget.host.playback {
			stream_name 'Passthrough Playback 4'
		}
		Object.Widget.pga.1 {
			Object.Control.mixer.1 {
				name '8 Master Playback Volume'
			}
		}
		format s24le
	}
	volume-playback.9 {
		dynamic_pipeline $DYNAMIC_PIPELINE
		index 9
		Object.Widget.pipeline.1 {
			stream_name 'dai.HDA.6.playback'
		}
		Object.Widget.host.playback {
			stream_name 'Passthrough Playback 5'
		}
		Object.Widget.pga.1 {
			Object.Control.mixer.1 {
				name '9 Master Playback Volume'
			}
		}
		format s24le
	}
	eq-iir-volume-capture.2 {
		dynamic_pipeline $DYNAMIC_PIPELINE
		index 2
		Object.Widget.pipeline.1 {
			stream_name 'dai.HDA.1.capture'
		}
		Object.Widget.host.capture {
			stream_name 'Highpass Capture 0'
		}
		Object.Widget.pga.1 {
			Object.Control.mixer.1 {
				name '2 Master Capture Volume'
			}
		}
		Object.Widget.eqiir.1 {
			Object.Control.bytes.1 {
				name eqiir_bytes_2
				# EQIIR filter coefficients
				IncludeByKey.EQIIR_BYTES {
					"[highpass.40hz.0db.48khz]" "include/components/eqiir/highpass_40hz_0db_48khz.conf"
					"[highpass.40hz.20db.48khz]" "include/components/eqiir/highpass_40hz_20db_48khz.conf"
				}
			}
		}
		format s24le
	}
	eq-iir-volume-capture.4 {
		dynamic_pipeline $DYNAMIC_PIPELINE
		index 4
		Object.Widget.pipeline.1 {
			stream_name 'dai.HDA.3.capture'
		}
		Object.Widget.host.capture {
			stream_name 'Highpass Capture 1'
		}
		Object.Widget.pga.1 {
			Object.Control.mixer.1 {
				name '4 Master Capture Volume'
			}
		}
		Object.Widget.eqiir.1 {
			Object.Control.bytes.1 {
				name eqiir_bytes_4
				# EQIIR filter coefficients
				IncludeByKey.EQIIR_BYTES {
					"[highpass.40hz.0db.48khz]" "include/components/eqiir/highpass_40hz_0db_48khz.conf"
					"[highpass.40hz.20db.48khz]" "include/components/eqiir/highpass_40hz_20db_48khz.conf"
				}
			}
		}
		format s24le
	}
}

# PCM Definitions
Object.PCM {
	pcm.0 {
		name 'HDA Analog'
		Object.Base.fe_dai.'HDA Analog' [
		]
		Object.PCM.pcm_caps.playback {
			name 'Passthrough Playback 0'
			formats 'S24_LE,S16_LE'
		}
		Object.PCM.pcm_caps.capture {
			name 'Highpass Capture 0'
			formats 'S24_LE,S16_LE'
		}
		direction duplex
		id 0
	}
	pcm.1 {
		name 'HDA Digital'
		Object.Base.fe_dai.'HDA Digital' [
		]
		Object.PCM.pcm_caps.playback {
			name 'Passthrough Playback 1'
			formats 'S24_LE,S16_LE'
		}
		Object.PCM.pcm_caps.capture {
			name 'Highpass Capture 1'
			formats 'S24_LE,S16_LE'
		}
		direction duplex
		id 1
	}
	pcm.3 {
		name HDMI1
		Object.Base.fe_dai.HDMI1 [
		]
		Object.PCM.pcm_caps.playback {
			name 'Passthrough Playback 3'
			formats 'S24_LE,S16_LE'
		}
		direction playback
		id 3
	}
	pcm.4 {
		name HDMI2
		Object.Base.fe_dai.HDMI2 [
		]
		Object.PCM.pcm_caps.playback {
			name 'Passthrough Playback 4'
			formats 'S24_LE,S16_LE'
		}
		direction playback
		id 4
	}
	pcm.5 {
		name HDMI3
		Object.Base.fe_dai.HDMI3 [
		]
		Object.PCM.pcm_caps.playback {
			name 'Passthrough Playback 5'
			formats 'S24_LE,S16_LE'
		}
		direction playback
		id 5
	}
}

# Top-level pipeline connections
Object.Base.route.1 {
	source 'buffer.1.2'
	sink 'dai.HDA.0.playback'
}
Object.Base.route.2 {
	source 'dai.HDA.1.capture'
	sink 'buffer.2.3'
}
Object.Base.route.3 {
	source 'buffer.3.2'
	sink 'dai.HDA.2.playback'
}
Object.Base.route.4 {
	source 'dai.HDA.3.capture'
	sink 'buffer.4.3'
}
Object.Base.route.5 {
	source 'buffer.7.2'
	sink 'dai.HDA.4.playback'
}
Object.Base.route.6 {
	source 'buffer.8.2'
	sink 'dai.HDA.5.playback'
}
Object.Base.route.7 {
	source 'buffer.9.2'
	sink 'dai.HDA.6.playback'
}

# Virtual Widgets for legacy machine driver backward-compatibility
Object.Widget.virtual {
	codec0_in {
		type input
		index 1
	}
	codec1_in {
		type input
		index 2
	}
	codec0_out {
		type output
		index 3
	}
	codec1_out {
		type output
		index 4
	}
	codec2_in {
		type input
		index 5
	}
	codec2_out {
		type output
		index 6
	}
	iDisp1_out {
		type output
		index 7
	}
	iDisp2_out {
		type output
		index 8
	}
	iDisp3_out {
		type output
		index 9
	}
	'iDisp3 Tx' {
		type out_drv
		index 0
	}
	'iDisp2 Tx' {
		type out_drv
		index 1
	}
	'iDisp1 Tx' {
		type out_drv
		index 2
	}
	'Analog CPU Playback' {
		type out_drv
		index 3
	}
	'Digital CPU Playback' {
		type out_drv
		index 4
	}
	'Alt Analog CPU Playback' {
		type out_drv
		index 5
	}
	'Analog CPU Capture' {
		type input
		index 6
	}
	'Digital CPU Capture' {
		type input
		index 7
	}
	'Alt Analog CPU Capture' {
		type input
		index 8
	}
}
