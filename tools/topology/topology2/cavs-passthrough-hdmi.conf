<searchdir:include>
<searchdir:include/common>
<searchdir:include/components>
<searchdir:include/dais>
<searchdir:include/pipelines/cavs>

<vendor-token.conf>
<tokens.conf>
<virtual.conf>
<passthrough-playback.conf>
<passthrough-capture.conf>
<mixin-playback.conf>
<mixout-playback.conf>
<mixin-capture.conf>
<mixout-capture.conf>
<data.conf>
<pcm.conf>
<pcm_caps.conf>
<fe_dai.conf>
<hda.conf>
<hw_config.conf>
<manifest.conf>
<route.conf>
<cavs/common_definitions.conf>

Define {
	HDA_CONFIG  "none"
}

# include HDA config if needed.
IncludeByKey.HDA_CONFIG {
	"mix"	"cavs-mixin-mixout-hda.conf"
	"passthrough"	"cavs-passthrough-hda.conf"
}

Object.Dai {
	HDA.4 {
		name iDisp1
		id 1
		default_hw_conf_id 1
		Object.Base.hw_config.HDA4 {}
		Object.Widget.copier.0 {
			index 5
			type dai_in
			dai_type "HDA"
                       copier_type "HDA"
			stream_name iDisp1
			period_sink_count 0
			period_source_count 2
			format s32le
			node_type $HDA_LINK_OUTPUT_CLASS
			num_audio_formats 2
			# 16-bit 48KHz 2ch
			Object.Base.audio_format.1 {
				dma_buffer_size "$[$obs * 2]"
			}
			# 32-bit 48KHz 2ch
			Object.Base.audio_format.2 {
				in_bit_depth		32
				in_valid_bit_depth	32
				out_bit_depth		32
				out_valid_bit_depth	32
				dma_buffer_size "$[$obs * 2]"
			}
		}
		direction playback
	}
	HDA.5 {
		name iDisp2
		id 2
		default_hw_conf_id 2
		Object.Base.hw_config.HDA5 {}
		Object.Widget.copier.0 {
			index 6
			type dai_in
			dai_type "HDA"
			copier_type "HDA"
			stream_name iDisp2
			period_sink_count 0
			period_source_count 2
			format s32le
			node_type $HDA_LINK_OUTPUT_CLASS
			num_audio_formats 2
			# 16-bit 48KHz 2ch
			Object.Base.audio_format.1 {
				dma_buffer_size "$[$obs * 2]"
			}
			# 32-bit 48KHz 2ch
			Object.Base.audio_format.2 {
				in_bit_depth		32
				in_valid_bit_depth	32
				out_bit_depth		32
				out_valid_bit_depth	32
				dma_buffer_size "$[$obs * 2]"
			}
		}
		direction playback
	}
	HDA.6 {
		name iDisp3
		id 3
		default_hw_conf_id 3
		Object.Base.hw_config.HDA6 {}
		Object.Widget.copier.0 {
			index 7
			type dai_in
			dai_type "HDA"
                       copier_type "HDA"
			stream_name iDisp3
			period_sink_count 0
			period_source_count 2
			format s32le
			node_type $HDA_LINK_OUTPUT_CLASS
			num_audio_formats 2
			# 16-bit 48KHz 2ch
			Object.Base.audio_format.0 {
				dma_buffer_size "$[$obs * 2]"
			}
			# 32-bit 48KHz 2ch
			Object.Base.audio_format.1 {
				in_bit_depth		32
				in_valid_bit_depth	32
				out_bit_depth		32
				out_valid_bit_depth	32
				dma_buffer_size "$[$obs * 2]"
			}
		}
		direction playback
	}
}
Object.Pipeline {
	passthrough-playback.0 {
		Object.Widget.pipeline.1 {
			stream_name 'copier.HDA.4.playback'
		}
		Object.Widget.copier.1 {
			stream_name 'Gain Playback 3'
		}

		format s16le
		index 5
	}
	passthrough-playback.1 {
		Object.Widget.pipeline.1 {
			stream_name 'copier.HDA.5.playback'
		}
		Object.Widget.copier.1 {
			stream_name 'Gain Playback 4'
		}

		format s16le
		index 6
	}
	passthrough-playback.2 {
		Object.Widget.pipeline.1 {
			stream_name 'copier.HDA.6.playback'
		}
		Object.Widget.copier.1 {
			stream_name 'Gain Playback 5'
		}

		format s16le
		index 7
	}
}
Object.PCM {
	pcm.2 {
		name HDMI1
		id 3
		Object.Base.fe_dai.HDMI1 {}
		Object.PCM.pcm_caps.playback {
			name 'Gain Playback 3'
			formats 'S32_LE,S24_LE,S16_LE'
		}
		direction playback
	}
	pcm.3 {
		name HDMI2
		id 4
		Object.Base.fe_dai.HDMI2 {}
		Object.PCM.pcm_caps.playback {
			name 'Gain Playback 4'
			formats 'S32_LE,S24_LE,S16_LE'
		}
		direction playback
	}
	pcm.4 {
		name HDMI3
		id 5
		Object.Base.fe_dai.HDMI3 {}
		Object.PCM.pcm_caps.playback {
			name 'Gain Playback 5'
			formats 'S32_LE,S24_LE,S16_LE'
		}
		direction playback
	}
}

# top-level pipeline connections
Object.Base.route.5 {
        source 'copier.host.5.1'
        sink 'copier.HDA.5.0'
}
Object.Base.route.6 {
        source 'copier.host.6.1'
        sink 'copier.HDA.6.0'
}
Object.Base.route.7 {
        source 'copier.host.7.1'
        sink 'copier.HDA.7.0'
}

Object.Widget.virtual {
	codec0_in {
		type input
		index 1
	}
	codec1_in {
		type input
		index 2
	}
	codec0_out {
		type output
		index 3
	}
	codec1_out {
		type output
		index 4
	}
	codec2_in {
		type input
		index 5
	}
	codec2_out {
		type output
		index 6
	}
	iDisp1_out {
		type output
		index 7
	}
	iDisp2_out {
		type output
		index 8
	}
	iDisp3_out {
		type output
		index 9
	}
	'iDisp3 Tx' {
		type out_drv
		index 0
	}
	'iDisp2 Tx' {
		type out_drv
		index 1
	}
	'iDisp1 Tx' {
		type out_drv
		index 2
	}
	'Analog CPU Playback' {
		type out_drv
		index 3
	}
	'Digital CPU Playback' {
		type out_drv
		index 4
	}
	'Alt Analog CPU Playback' {
		type out_drv
		index 5
	}
	'Analog CPU Capture' {
		type input
		index 6
	}
	'Digital CPU Capture' {
		type input
		index 7
	}
	'Alt Analog CPU Capture' {
		type input
		index 8
	}
}
