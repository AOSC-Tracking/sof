#
# CAVS iir eq capture pipeline
#
# A simple iir eq pipeline. All attributes defined herein are namespaced
# by alsatplg to "Object.Pipeline.gain-capture.N.attribute_name".
#
# Usage: eqiir-capture pipeline object can be instantiated as:
#
# Object.Pipeline.eqiir-capture."N" {
# 	format		"s16le"
# 	period		1000
# 	time_domain	"timer"
# 	channels	2
# 	rate		48000
# }
#
# Where N is the unique pipeline ID within the same alsaconf node.
#

<include/common/audio_format.conf>
<include/components/copier.conf>
<include/components/gain.conf>
<include/components/pipeline.conf>
<include/components/eqiir.conf>
<include/controls/bytes.conf>
<include/common/data.conf>

Class.Pipeline."eqiir-capture" {

	DefineAttribute."index" {}

	<include/pipelines/pipeline-common.conf>

	attributes {
		!constructor [
			"index"
		]

		!immutable [
			"direction"
		]

		#
		# gain-capture objects instantiated within the same alsaconf node must have
		# unique pipeline_id attribute
		#
		unique	"instance"
	}

	Object.Widget {
		copier."1" {
			copier_type	"host"
			type	"aif_out"
			num_audio_formats 3
			# 16-bit 48KHz 2ch
			Object.Base.audio_format.1 {
				in_bit_depth		32
				in_valid_bit_depth	32
				dma_buffer_size "$[$obs * 2]"
			}
			# 24-bit 48KHz 2ch
			Object.Base.audio_format.2 {
				in_bit_depth		32
				in_valid_bit_depth	32
				out_bit_depth		32
				out_valid_bit_depth	24
				dma_buffer_size "$[$obs * 2]"
			}
			# 32-bit 48KHz 2ch
			Object.Base.audio_format.3 {
				in_bit_depth		32
				in_valid_bit_depth	32
				out_bit_depth		32
				out_valid_bit_depth	32
				dma_buffer_size "$[$obs * 2]"
			}
			node_type $HDA_HOST_INPUT_CLASS
		}

		eqiir."1" {
			num_audio_formats 2
			#16-bit 48KHz 2ch
			Object.Base.audio_format.1 {}
			# 32-bit 48KHz 2ch
			Object.Base.audio_format.2 {
				in_bit_depth		32
				in_valid_bit_depth	32
				out_bit_depth		32
				out_valid_bit_depth	32
			}

			Object.Control.bytes."1" {
				Object.Base.data."iir_eq" {
					bytes "
					      0x53,0x4f,0x46,0x34,0x58,0x00,0x00,0x00,
					      0x00,0xc0,0x00,0x03,0x04,0x00,0x00,0x00,
					      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					      0x58,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
					      0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					      0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
					      0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					      0x00,0x00,0x00,0x00,0x4a,0x8c,0x3c,0xc0,
					      0x04,0x57,0xc3,0x7f,0xc0,0x43,0x04,0x20,
					      0x80,0x78,0xf7,0xbf,0xc0,0x43,0x04,0x20,
					      0x00,0x00,0x00,0x00,0xb2,0x7f,0x00,0x00"
				}
			}
		}

		copier."2" {
			type buffer
			copier_type	"module"
			num_audio_formats 2
			#16-bit 48KHz 2ch
			Object.Base.audio_format.1 {}
			# 32-bit 48KHz 2ch
			Object.Base.audio_format.2 {
				in_bit_depth		32
				in_valid_bit_depth	32
				out_bit_depth		32
				out_valid_bit_depth	32
				dma_buffer_size "$[$ibs * 2]"
			}
		}

		pipeline."1" {
			priority	0
			lp_mode		0
		}
	}

	Object.Base {
		route."1" {
			source	"copier.module..2"
			sink	"eqiir..1"
		}
		route."2" {
			source	"eqiir..1"
			sink	"copier.host..1"
		}
	}

	direction	"capture"
	dynamic_pipeline 1
	time_domain	"timer"
	channels	2
	channels_min	2
	channels_max	2
	rate		48000
	rate_min	48000
	rate_max	48000
}
