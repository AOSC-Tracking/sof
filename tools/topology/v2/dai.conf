# DAI attributes and component declarations

# These have to be globally defined, so they are using a "dai_" prefix
DefineAttribute.dai_format {
	type format
	# could make it optional with s32le as default?
	availability mandatory
}

DefineAttribute.dai_periods {
	type integer
	availability optional
	default 2
	min 1
}

DefineAttribute.dai_index {
	type integer
	availability mandatory
}

DefineType.dai_type {
	enum [
		"ALH"
		"DMIC"
		"ESAI"
		"HDA"
		"SAI"
		"SSP"
	]
}

DefineAttribute.dai_type {
	type dai_type
	availability mandatory
}

# The DAI widget
DefineWidget."dai" {
	DefineAttribute.backend {
		type string
		availability mandatory
	}

	attributes [
		template
		backend
		periods_sink
		periods_source
		dai_format
		dai_type
		dai_index
	        schedule_time_domain
	]
}

# DAI_CONFIG adds 2 components: SectionBE, SectionHWConfig, but we want a block
# for each component, so we need two defines

# A back end / SectionBE
DefineBE {
	DefineAttribute.index {
		type integer
		availability mandatory
	}

	DefineAttribute.id {
		type integer
		availability mandatory
	}

	DefineAttribute.default_hw_conf_id {
		type integer
		availability mandatory
	}

	DefineAttribute.hw_configs {
		type array.string
		availability mandatory
	}

	# index is always \"0\", default_hw_conf_id is always identical
	attributes [
		id
		index
		default_hw_conf_id
		hw_configs
	]

	index 0
	default_hw_conf_id $id

	# FIXME we need concatenation
	hw_configs [
		@func concat
			strings [
				$dai_type
				$dai_index
			]
	]
}

# SectionHWConfig
DefineHWConfig {
	DefineAttribute.id {
		type integer
		availability mandatory
	}

	attributes [
		id
		# we also need to define attributes for SSP, SAI, ESAI
	]
}
